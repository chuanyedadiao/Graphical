#include<GL/freeglut.h>
#include<iostream>
#include<stdlib.h>
using namespace std;
#define xl 100
#define xr 300
#define yb 100
#define yt 300
void Init()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(-200, 400.0, -200.0, 400.0);
}
void drawLine(int x1, int y1, int x2, int y2)
{
	glBegin(GL_LINE);
	glColor3f(1.0f, 0.0f, 0.0f);
	glVertex2i(x1, y1);
	glColor3f(0.0f, 1.0f, 0.0f);
	glVertex2i(x2, y2);
	glEnd();
}
void drawborder(int l, int r, int b, int t)
{
	glLineWidth(5);
	glBegin(GL_LINE_LOOP);
	glColor3f(0.0f, 1.0f, 0.0f);
	glVertex2f(l, b);
	glVertex2f(l, t);
	glVertex2f(r, t);
	glVertex2f(r, b);
}
int getcode(int x, int y)
{
	int code = 0;
	if (x < xl) code += 1;
	if (x > xr) code += 2;
	if (y < yb) code += 4;
	if (y > yt) code += 8;
	return code;
}
void cut(int *x, int *y, int border, int m, float k)
{
	float x0, y0;
	switch (m)
	{
	case 1: {
		y0 = *y + k * (border - *x);
		x0 = border;
		*x = x0;
		*y = y0;
		break;
	}
	case 2: {
		y0 = *y + k * (border - *x);
		x0 = border;
		*x = x0;
		*y = y0;
		break;
	}
	case 3: {
		x0 = *x + (border - *y) / k;
		y0 = border;
		*x = x0;
		*y = y0;
		break;
	}
	case 4: {
		x0 = *x + (border - *y) / k;
		y0 = border;
		*x = x0;
		*y = y0;
		break;
	}
	}
}
void Cohen_Sutherland(int *x1, int *y1, int *x2, int *y2)
{
	int code1, code2, code, m = 1, x0, y0;
	float k;
	k = (float)(*y2 - *y1) / (*x2 - *x1);
	code1 = getcode(*x1, *y1);
	code2 = getcode(*x2, *y2);
	if (code1&code2) return;
	while (code1 | code2)
	{
		m = 1;
		if (code1 == 0) {
			swap(*x1, *x2);
			swap(*y1, *y2);
			swap(code1, code2);
		}
		code = code1;
		for(;code%2!=1;)
		{
			code /= 2;
			m++;
		}
		x0 = *x1; y0 = *y1;
		switch (m)
		{
		case 1: {
			cut(&x0, &y0, xl, m, k);
			break;
		}
		case 2: {
			cut(&x0, &y0, xr, m, k);
			break;
		}
		case 3: {
			cut(&x0, &y0, yb, m, k);
			break;
		}
		case 4: {
			cut(&x0, &y0, yt, m, k);
			break;
		}
		}
		code1 = getcode(x0, y0);
		*x1 = x0; *y1 = y0;
		swap(*x1, *x2);
		swap(*y1, *y2);
		swap(code1, code2);
	}
}
void Display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	int x1, y1, x2, y2;
	x1 = 450; y1 = 0; x2 = 0; y2 = 450;
	drawborder(xl, xr, yb, yt);
	Cohen_Sutherland(&x1, &y1, &x2, &y2);
	drawLine(x1, y1, x2, y2);
	glFlush();
}
void Reshape(int w, int h) {
	
glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	
glMatrixMode(GL_PROJECTION);
	
glLoadIdentity();
	
gluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h);
}
int main(int argc, char *argv[]) {
	
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
	
glutInitWindowPosition(100, 100);
	
glutInitWindowSize(640, 480);
	
glutCreateWindow("CUT");
	
Init();
	
glutDisplayFunc(Display);
	
glutReshapeFunc(Reshape);
	
glutMainLoop();
	
return 0£»


}